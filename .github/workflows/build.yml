name: build

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  compile-emcc:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Emscripten
        uses: mymindstorm/setup-emsdk@v14
        with:
          version: 3.1.45

      - name: Make build directory
        run: mkdir -p build-wasm

      - name: Compile with emcc
        run: |
          sed -i '1s/^\xEF\xBB\xBF//' src/glsl/*.*
          emcc src/main.cpp src/shader.cpp src/frame.cpp src/camera.cpp src/framebuffer.cpp src/debug.cpp src/earth.cpp \
            -o build-wasm/index.html \
            -s FULL_ES3=1 -s USE_GLFW=3 \
            --preload-file src/glsl \
            --preload-file assets \
            -I./external-wasm \
            -s ALLOW_MEMORY_GROWTH=1

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        if: github.ref == 'refs/heads/cicd'
        with:
          github_token: ${{ secrets.GH_TOKEN }}
          publish_dir: ./build-wasm
          publish_branch: gh-pages

  build-windows:
    name: Windows ${{ matrix.arch }} ${{ matrix.build_type }}
    runs-on: windows-2022

    strategy:
      matrix:
        arch: [Win32, x64]
        build_type: [Release]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Add MSBuild to PATH
        uses: microsoft/setup-msbuild@v2

      - name: Create build directory
        run: cmake -E make_directory ${{ github.workspace }}/build

      - name: Configure CMake
        working-directory: ${{ github.workspace }}/build
        run: |
          cmake .. -A ${{ matrix.arch }} -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}

      - name: Build
        working-directory: ${{ github.workspace }}/build
        run: cmake --build . --config ${{ matrix.build_type }} -- -m

      - name: Install
        working-directory: ${{ github.workspace }}/build
        run: cmake --install . --config ${{ matrix.build_type }}

      - name: Zip Windows Binaries
        run: |
          cd ${{ github.workspace }}/build/${{ matrix.build_type }}
          ls -R
          7z a -r ${{ github.workspace }}/build/${{ matrix.arch }}_${{ matrix.build_type }}.zip ./*

      - name: Upload Binaries as Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows_${{ matrix.arch }}_${{ matrix.build_type }}
          path: ${{ github.workspace }}/build/${{ matrix.arch }}_${{ matrix.build_type }}.zip
          if-no-files-found: error

  create-release:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [build-windows]
    runs-on: ubuntu-latest
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          name: windows_Win32_Release

      - name: Download Artifacts for x64
        uses: actions/download-artifact@v4
        with:
          name: windows_x64_Release

      - name: List downloaded files (debug)
        run: ls -R

      - name: Create Release
        id: create_release
        uses: marvinpinto/action-automatic-releases@latest
        with:
          repo_token: ${{ secrets.GH_TOKEN }}
          automatic_release_tag: "latest"
          prerelease: false
          title: "Release"
          files: |
            ${{ github.workspace }}/Win32_Release.zip
            ${{ github.workspace }}/x64_Release.zip
